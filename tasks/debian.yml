---
- name: Configure APT sources
  ansible.builtin.include_tasks: apt_sources.yml
  when: base_apt_overwrite

- name: Update APT cache
  ansible.builtin.apt:
    update_cache: true
  changed_when: false
  when:
    - not ansible_check_mode
  tags:
    - minimal

- name: Ensure custom APT packages are installed
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop: "{{ base_packages }}"
  tags:
    - minimal

- name: Ensure GnuPG is installed on Ubuntu newer than 20.04
  ansible.builtin.apt:
    name: gnupg
    state: present
  when: ansible_distribution == 'Ubuntu' or ansible_distribution_version is version('20.04', '>=')
  tags:
    - minimal

- name: Ensure GnuPG is installed on Ubuntu < 20.04 and any other systems
  ansible.builtin.apt:
    name: gnupg2
    state: present
  when: ansible_distribution != 'Ubuntu' or ansible_distribution_version is version('20.04', '<')
  tags:
    - minimal

- name: Upgrade all packages
  ansible.builtin.apt:
    name: "*"
    state: "{{ 'latest' }}"
  when:
    - not ansible_check_mode

- name: Remove useless APT packages from the cache
  ansible.builtin.apt:
    autoclean: true
  when:
    - not ansible_check_mode

- name: Remove APT dependencies that are no longer required
  ansible.builtin.apt:
    autoremove: true
  when:
    - not ansible_check_mode

- name: Allow installing PIP packages to system Python
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /usr/lib/python3.11/EXTERNALLY-MANAGED
  when: base_system_python_allow_pip
  tags:
    - minimal
